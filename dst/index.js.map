{"version":3,"file":"index.js","sources":["../src/mapbox.js","../src/regl.js","../src/region/context.js","../src/loading/context.js","../src/loading/loading-updater.js","../src/map.js","../src/region/region-picker/circle-picker/utils.js","../src/region/region-picker/circle-picker/cursor-manager.js","../src/region/region-picker/circle-picker/circle-renderer.js","../src/region/region-picker/circle-picker/index.js","../src/region/region-picker/index.js","../src/use-recenter-region.js","../src/use-controls.js","../src/shaders.js","../src/utils.js","../src/constants.js","../src/tile.js","../src/tiles.js","../src/raster.js","../src/line.js","../src/fill.js","../src/use-ruler.js"],"sourcesContent":["import React, {\n  createContext,\n  useState,\n  useRef,\n  useCallback,\n  useEffect,\n  useContext,\n} from 'react'\nimport mapboxgl from 'mapbox-gl'\n\nexport const MapboxContext = createContext(null)\n\nexport const useMapbox = () => {\n  return useContext(MapboxContext)\n}\n\nconst Mapbox = ({\n  glyphs,\n  style,\n  center,\n  zoom,\n  minZoom,\n  maxZoom,\n  maxBounds,\n  debug,\n  children,\n}) => {\n  const map = useRef()\n  const [ready, setReady] = useState()\n\n  const ref = useCallback((node) => {\n    const mapboxStyle = { version: 8, sources: {}, layers: [] }\n    if (glyphs) {\n      mapboxStyle.glyphs = glyphs\n    }\n    if (node !== null) {\n      map.current = new mapboxgl.Map({\n        container: node,\n        style: mapboxStyle,\n        minZoom: minZoom,\n        maxZoom: maxZoom,\n        maxBounds: maxBounds,\n        dragRotate: false,\n        pitchWithRotate: false,\n        touchZoomRotate: true,\n      })\n      if (center) map.current.setCenter(center)\n      if (zoom) map.current.setZoom(zoom)\n      map.current.touchZoomRotate.disableRotation()\n      map.current.touchPitch.disable()\n      map.current.on('styledata', () => {\n        setReady(true)\n      })\n    }\n  }, [])\n\n  useEffect(() => {\n    return () => {\n      if (map.current) {\n        map.current.remove()\n        setReady(false)\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    map.current.showTileBoundaries = debug\n  }, [debug])\n\n  return (\n    <MapboxContext.Provider\n      value={{\n        map: map.current,\n      }}\n    >\n      <div\n        style={{\n          top: '0px',\n          bottom: '0px',\n          position: 'absolute',\n          width: '100%',\n          ...style,\n        }}\n        ref={ref}\n      />\n      {ready && children}\n    </MapboxContext.Provider>\n  )\n}\n\nexport default Mapbox\n","import React, {\n  createContext,\n  useCallback,\n  useState,\n  useEffect,\n  useContext,\n  useRef,\n} from 'react'\nimport _regl from 'regl'\n\nexport const ReglContext = createContext(null)\n\nexport const useRegl = () => {\n  return useContext(ReglContext)\n}\n\nconst Regl = ({ style, extensions, children }) => {\n  const regl = useRef()\n  const [ready, setReady] = useState(false)\n\n  const ref = useCallback((node) => {\n    if (node !== null) {\n      regl.current = _regl({\n        container: node,\n        extensions: ['OES_texture_float', 'OES_element_index_uint'],\n      })\n      setReady(true)\n    }\n  }, [])\n\n  useEffect(() => {\n    return () => {\n      if (regl.current) regl.current.destroy()\n      setReady(false)\n    }\n  }, [])\n\n  return (\n    <ReglContext.Provider\n      value={{\n        regl: regl.current,\n      }}\n    >\n      <div style={{ width: '100%', height: '100%', ...style }} ref={ref} />\n      {ready && children}\n    </ReglContext.Provider>\n  )\n}\n\nexport default Regl\n","import React, { createContext, useContext, useState } from 'react'\n\nconst RegionContext = createContext({\n  region: null,\n  onChange: () => {\n    throw new Error('Tried to set region before initializing context')\n  },\n})\n\nexport const useRegionContext = () => {\n  return useContext(RegionContext)\n}\n\nexport const useRegion = () => {\n  const { region } = useContext(RegionContext)\n  return { region }\n}\n\nexport const RegionProvider = ({ children }) => {\n  const [region, setRegion] = useState(null)\n\n  return (\n    <RegionContext.Provider value={{ region, setRegion }}>\n      {children}\n    </RegionContext.Provider>\n  )\n}\n","import React, {\n  createContext,\n  useCallback,\n  useContext,\n  useEffect,\n  useReducer,\n  useRef,\n  useState,\n} from 'react'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst LoadingContext = createContext({})\n\nexport const useSetLoading = () => {\n  const loadingId = useRef(uuidv4())\n  const loading = useRef(false)\n  const { dispatch } = useContext(LoadingContext)\n  const [metadataIds, setMetadataIds] = useState(new Set())\n  const [chunkIds, setChunkIds] = useState(new Set())\n\n  useEffect(() => {\n    return () => {\n      const loaders = [{ id: loadingId.current, key: 'loading' }]\n      metadataIds.forEach((id) => loaders.push({ id, key: 'metadata' }))\n      chunkIds.forEach((id) => loaders.push({ id, key: 'chunk' }))\n      dispatch({ loaders, type: 'clear' })\n    }\n  }, [])\n\n  useEffect(() => {\n    if (loading.current && metadataIds.size === 0 && chunkIds.size === 0) {\n      dispatch({\n        loaders: [{ id: loadingId.current, key: 'loading' }],\n        type: 'clear',\n      })\n      loading.current = false\n    }\n  }, [metadataIds.size, chunkIds.size, loading.current])\n\n  const setLoading = useCallback((key = 'chunk') => {\n    if (!['chunk', 'metadata'].includes(key)) {\n      throw new Error(\n        `Unexpected loading key: ${key}. Expected one of: 'chunk', 'metadata'.`\n      )\n    }\n\n    const id = uuidv4()\n    const setter = key === 'metadata' ? setMetadataIds : setChunkIds\n    setter((prev) => {\n      prev.add(id)\n      return prev\n    })\n\n    const loaders = [{ id, key }]\n\n    if (!loading.current) {\n      loaders.push({ id: loadingId.current, key: 'loading' })\n      loading.current = true\n    }\n    dispatch({ loaders, type: 'set' })\n    return id\n  }, [])\n\n  const clearLoading = useCallback((id, { forceClear } = {}) => {\n    if (id) {\n      setMetadataIds((prevMetadata) => {\n        prevMetadata.delete(id)\n        return prevMetadata\n      })\n      setChunkIds((prevChunk) => {\n        prevChunk.delete(id)\n        return prevChunk\n      })\n\n      dispatch({\n        loaders: [\n          { id, key: 'metadata' },\n          { id, key: 'chunk' },\n        ],\n        type: 'clear',\n      })\n    }\n\n    if (forceClear && loading.current) {\n      dispatch({\n        loaders: [{ id: loadingId.current, key: 'loading' }],\n        type: 'clear',\n      })\n      loading.current = false\n    }\n  }, [])\n\n  return {\n    setLoading,\n    clearLoading,\n    loading: loading.current,\n    metadataLoading: metadataIds.size > 0,\n    chunkLoading: chunkIds.size > 0,\n  }\n}\n\nconst reducer = (state, action) => {\n  switch (action.type) {\n    case 'set':\n      action.loaders.forEach(({ id, key }) => {\n        state[key].add(id)\n      })\n\n      return { ...state }\n    case 'clear':\n      action.loaders.forEach(({ id, key }) => {\n        state[key].delete(id)\n      })\n\n      return { ...state }\n    default:\n      throw new Error(`Unexpected action: ${action.type}`)\n  }\n}\n\nexport const LoadingProvider = ({ children }) => {\n  const [state, dispatch] = useReducer(reducer, {\n    loading: new Set(),\n    metadata: new Set(),\n    chunk: new Set(),\n  })\n\n  return (\n    <LoadingContext.Provider\n      value={{\n        ...state,\n        dispatch,\n      }}\n    >\n      {children}\n    </LoadingContext.Provider>\n  )\n}\n\nexport const useLoadingContext = () => {\n  const { loading, metadata, chunk } = useContext(LoadingContext)\n\n  return {\n    loading: loading.size > 0,\n    metadataLoading: metadata.size > 0,\n    chunkLoading: chunk.size > 0,\n  }\n}\n","import { useEffect } from 'react'\n\nimport { useLoadingContext } from './context'\n\nexport const LoadingUpdater = ({\n  setLoading,\n  setMetadataLoading,\n  setChunkLoading,\n}) => {\n  const { loading, metadataLoading, chunkLoading } = useLoadingContext()\n\n  useEffect(() => {\n    if (setLoading) {\n      setLoading(loading)\n    }\n  }, [!!setLoading, loading])\n\n  useEffect(() => {\n    if (setMetadataLoading) {\n      setMetadataLoading(metadataLoading)\n    }\n  }, [!!setMetadataLoading, metadataLoading])\n\n  useEffect(() => {\n    if (setChunkLoading) {\n      setChunkLoading(chunkLoading)\n    }\n  }, [!!setChunkLoading, chunkLoading])\n\n  return null\n}\n","import React from 'react'\nimport Mapbox from './mapbox'\nimport Regl from './regl'\nimport { RegionProvider } from './region/context'\nimport { LoadingProvider, LoadingUpdater } from './loading'\n\nconst Map = ({\n  id,\n  tabIndex,\n  className,\n  style,\n  zoom,\n  minZoom,\n  maxZoom,\n  maxBounds,\n  center,\n  debug,\n  extensions,\n  glyphs,\n  children,\n  /** Tracks *any* pending requests made by containing `Raster` layers */\n  setLoading,\n  /** Tracks any metadata and coordinate requests made on initialization by containing `Raster` layers */\n  setMetadataLoading,\n  /** Tracks any requests of new chunks by containing `Raster` layers */\n  setChunkLoading,\n}) => {\n  return (\n    <div\n      id={id}\n      tabIndex={tabIndex}\n      className={className}\n      style={{\n        position: 'relative',\n        width: '100%',\n        height: '100%',\n        overflow: 'hidden',\n        ...style,\n      }}\n    >\n      <Mapbox\n        zoom={zoom}\n        minZoom={minZoom}\n        maxZoom={maxZoom}\n        maxBounds={maxBounds}\n        center={center}\n        debug={debug}\n        glyphs={glyphs}\n        style={{ position: 'absolute' }}\n      >\n        <Regl\n          extensions={extensions}\n          style={{\n            position: 'absolute',\n            pointerEvents: 'none',\n            zIndex: -1,\n          }}\n        >\n          <LoadingProvider>\n            <LoadingUpdater\n              setLoading={setLoading}\n              setMetadataLoading={setMetadataLoading}\n              setChunkLoading={setChunkLoading}\n            />\n            <RegionProvider>{children}</RegionProvider>\n          </LoadingProvider>\n        </Regl>\n      </Mapbox>\n    </div>\n  )\n}\n\nexport default Map\n","import { geoPath, geoTransform } from 'd3-geo'\nimport mapboxgl from 'mapbox-gl'\n\nexport const project = (map, coordinates, options = {}) => {\n  // Convert any LngLatLike to LngLat\n  const ll = mapboxgl.LngLat.convert(coordinates)\n\n  let result = map.project(ll)\n\n  // When present, use referencePoint to find closest renderable point\n  const { referencePoint } = options\n  if (referencePoint) {\n    const deltas = [-360, 360]\n    deltas.forEach((delta) => {\n      const alternate = map.project({ lat: ll.lat, lng: ll.lng + delta })\n      if (\n        Math.abs(alternate.x - referencePoint.x) <\n        Math.abs(result.x - referencePoint.x)\n      ) {\n        result = alternate\n      }\n    })\n  }\n\n  return result\n}\n\nexport function getPathMaker(map, options) {\n  const transform = geoTransform({\n    point: function (lng, lat) {\n      const point = project(map, [lng, lat], options)\n      this.stream.point(point.x, point.y)\n    },\n  })\n  return geoPath().projection(transform)\n}\n","export default function CursorManager(map) {\n  const canvas = map.getCanvas()\n  const originalStyle = canvas.style.cursor\n\n  let mouseState = {\n    onHandle: false,\n    draggingHandle: false,\n    onCircle: false,\n    draggingCircle: false,\n  }\n\n  return function setCursor(newState) {\n    mouseState = {\n      ...mouseState,\n      ...newState,\n    }\n\n    if (mouseState.onHandle || mouseState.draggingHandle)\n      canvas.style.cursor = 'ew-resize'\n    else if (mouseState.onCircle || mouseState.draggingCircle)\n      canvas.style.cursor = 'move'\n    else canvas.style.cursor = originalStyle\n  }\n}\n","import { select } from 'd3-selection'\nimport { FLOATING_HANDLE, SHOW_RADIUS_GUIDELINE } from '../constants'\nimport { getPathMaker, project } from './utils'\nimport {\n  area,\n  convertArea,\n  distance,\n  rewind,\n  rhumbDestination,\n  lineString,\n  lineIntersect,\n  circle as turfCircle,\n  point,\n} from '@turf/turf'\nimport CursorManager from './cursor-manager'\n\nconst POLES = [point([0, -90]), point([0, 90])]\nconst abbreviations = {\n  kilometers: 'km',\n  miles: 'mi',\n}\n\nexport default function CircleRenderer({\n  id,\n  map,\n  onIdle = (circle) => {},\n  onDrag = (circle) => {},\n  initialCenter = { lat: 0, lng: 0 },\n  initialRadius = 0,\n  maxRadius,\n  minRadius,\n  units,\n}) {\n  let circle = null\n  let center = initialCenter\n  let centerXY = project(map, center)\n  let radius = initialRadius\n\n  const svg = select(`#circle-picker-${id}`).style('pointer-events', 'none')\n  const svgCircle = select(`#circle-${id}`).style('pointer-events', 'all')\n  const svgCircleCutout = select(`#circle-cutout-${id}`)\n  const svgHandle = select(`#handle-${id}`).style('pointer-events', 'all')\n  const svgGuideline = select(`#radius-guideline-${id}`)\n  const svgRadiusTextContainer = select(`#radius-text-container-${id}`)\n  const svgRadiusText = select(`#radius-text-${id}`).attr('fill-opacity', 0)\n\n  let guidelineAngle = 90\n  if (!SHOW_RADIUS_GUIDELINE) {\n    svgGuideline.style('display', 'none')\n    svgRadiusTextContainer.style('display', 'none')\n  }\n\n  const removers = []\n\n  //// LISTENERS ////\n\n  function addDragHandleListeners() {\n    const onMouseMove = (e) => {\n      let r = distance(\n        map.unproject(e.point).toArray(),\n        [center.lng, center.lat],\n        { units }\n      )\n      r = maxRadius ? Math.min(r, maxRadius) : r\n      r = minRadius ? Math.max(r, minRadius) : r\n      setRadius(r)\n      onDrag(circle)\n\n      if (FLOATING_HANDLE) {\n        const mouseXY = e.point\n        const rise = mouseXY.y - centerXY.y\n        const run = mouseXY.x - centerXY.x\n        let angle = (Math.atan(rise / run) * 180) / Math.PI\n        guidelineAngle = angle + 90 + (run < 0 ? 180 : 0)\n        setCircle()\n      }\n    }\n\n    const onMouseUp = (e) => {\n      onIdle(circle)\n      setCursor({ draggingHandle: false })\n      map.off('mousemove', onMouseMove)\n      svgHandle.style('pointer-events', 'all')\n      svgCircle.style('pointer-events', 'all')\n      svgRadiusText.attr('fill-opacity', 0)\n      svgGuideline.attr('stroke-opacity', 0)\n    }\n\n    svgHandle.on('mousedown', () => {\n      map.on('mousemove', onMouseMove)\n      map.once('mouseup', onMouseUp)\n      setCursor({ draggingHandle: true })\n      svgHandle.style('pointer-events', 'none')\n      svgCircle.style('pointer-events', 'none')\n      svgRadiusText.attr('fill-opacity', 1)\n      svgGuideline.attr('stroke-opacity', 1)\n    })\n\n    removers.push(function removeDragHandleListeners() {\n      svgHandle.on('mousedown', null)\n    })\n  }\n\n  function addCircleListeners() {\n    let offset\n    const mapCanvas = map.getCanvas()\n\n    const onMouseMove = (e) => {\n      setCenter(\n        {\n          lng: e.lngLat.lng - offset.lng,\n          lat: e.lngLat.lat - offset.lat,\n        },\n        {\n          x: e.point.x,\n          y: e.point.y,\n        }\n      )\n      onDrag(circle)\n    }\n\n    const onMouseUp = (e) => {\n      onIdle(circle)\n      setCursor({ draggingCircle: false })\n      map.off('mousemove', onMouseMove)\n      svgCircle.style('pointer-events', 'all')\n      svgHandle.style('pointer-events', 'all')\n    }\n\n    svgCircle.on('mousedown', (e) => {\n      const { offsetX: x, offsetY: y } = e\n      const lngLat = map.unproject({ x, y })\n      offset = {\n        lng: lngLat.lng - center.lng,\n        lat: lngLat.lat - center.lat,\n      }\n\n      setCursor({ draggingCircle: true })\n      map.on('mousemove', onMouseMove)\n      map.once('mouseup', onMouseUp)\n      svgCircle.style('pointer-events', 'none')\n      svgHandle.style('pointer-events', 'none')\n    })\n\n    svgCircle.on('wheel', (e) => {\n      e.preventDefault()\n      let newEvent = new e.constructor(e.type, e)\n      mapCanvas.dispatchEvent(newEvent)\n    })\n\n    removers.push(function removeCircleListeners() {\n      svgCircle.on('mousedown', null)\n      svgCircle.on('wheel', null)\n    })\n  }\n\n  function addMapMoveListeners() {\n    const onMove = setCircle\n\n    map.on('move', onMove)\n    removers.push(function removeMapMoveListeners() {\n      map.off('move', onMove)\n    })\n  }\n\n  //// CIRCLE ////\n\n  function geoCircle(center, radius, inverted = false) {\n    const c = turfCircle([center.lng, center.lat], radius, {\n      units,\n      steps: 64,\n      properties: {\n        center,\n        radius,\n        units,\n      },\n    })\n\n    c.properties.area = convertArea(area(c), 'meters', units)\n    c.properties.zoom = map.getZoom()\n\n    if (inverted) {\n      return c\n    }\n\n    // need to rewind or svg fill is inside-out\n    return rewind(c, { reverse: true, mutate: true })\n  }\n\n  //// SETTERS ////\n\n  const setCursor = CursorManager(map)\n\n  function setCenter(_center, _point) {\n    if (_center && _center !== center) {\n      if (nearPoles(_center, radius)) {\n        center = { lng: _center.lng, lat: center.lat }\n        centerXY = { x: _point.x, y: centerXY.y }\n      } else {\n        center = _center\n        centerXY = _point\n      }\n\n      setCircle()\n    }\n  }\n\n  function resetCenterXY() {\n    // reset centerXY value based on latest `map` value\n    centerXY = project(map, center, { referencePoint: centerXY })\n  }\n\n  function setRadius(_radius) {\n    if (_radius && _radius !== radius) {\n      if (!nearPoles(center, _radius)) {\n        radius = _radius\n        setCircle()\n      }\n    }\n  }\n\n  function nearPoles(center, radius) {\n    const turfPoint = point([center.lng, center.lat])\n\n    return POLES.some((pole) => distance(turfPoint, pole, { units }) < radius)\n  }\n\n  function setCircle() {\n    // ensure that centerXY is up-to-date with map\n    resetCenterXY()\n\n    const makePath = getPathMaker(map, {\n      referencePoint: centerXY,\n    })\n\n    // update svg circle\n    circle = geoCircle(center, radius)\n    const path = makePath(circle)\n    svgCircle.attr('d', path)\n\n    // update cutout\n    const cutoutCircle = geoCircle(center, radius, true)\n    const cutoutPath = makePath(cutoutCircle)\n    const { width, height } = svg.node().getBBox()\n    svgCircleCutout.attr('d', cutoutPath + ` M0,0H${width}V${height}H0V0z`)\n\n    // update other svg elements\n    const handleXY = (() => {\n      // by default just render handle based on radius and guideline angle\n      let coordinates = rhumbDestination(\n        [center.lng, center.lat],\n        radius,\n        guidelineAngle\n      ).geometry.coordinates\n\n      const lineEnd = rhumbDestination(\n        [center.lng, center.lat],\n        radius * 2,\n        guidelineAngle\n      )\n      const line = lineString([\n        [center.lng, center.lat],\n        lineEnd.geometry.coordinates,\n      ])\n      const inter = lineIntersect(line, circle)\n      // but prefer rendering using intersection with circle to handle distortions near poles\n      if (inter.features.length > 0) {\n        coordinates = inter.features[0].geometry.coordinates\n      }\n\n      return project(map, coordinates, {\n        referencePoint: centerXY,\n      })\n    })()\n\n    svgHandle.attr('cx', handleXY.x).attr('cy', handleXY.y)\n\n    svgGuideline\n      .attr('x1', centerXY.x)\n      .attr('y1', centerXY.y)\n      .attr('x2', handleXY.x)\n      .attr('y2', handleXY.y)\n\n    const translateY = 4\n\n    svgRadiusText\n      .text(radius.toFixed(0) + abbreviations[units])\n      .attr(\n        'transform',\n        `rotate(${-1 * guidelineAngle + 90}) ` + `translate(0, ${translateY})`\n      )\n\n    const translateX = (() => {\n      const { width: textWidth } = svgRadiusText.node().getBBox()\n      const coeff = 0.8 * Math.sin((guidelineAngle * Math.PI) / 180)\n      return 18 + Math.abs((coeff * textWidth) / 2)\n    })()\n\n    svgRadiusTextContainer.attr(\n      'transform',\n      `rotate(${guidelineAngle - 90}, ${handleXY.x}, ${handleXY.y}) ` +\n        `translate(${handleXY.x + translateX}, ${handleXY.y})`\n    )\n  }\n\n  //// INIT ////\n\n  addDragHandleListeners()\n  addCircleListeners()\n  addMapMoveListeners()\n  setCircle()\n  onIdle(circle)\n\n  //// INTERFACE ////\n\n  return {\n    remove: () => {\n      removers.reverse().forEach((remove) => remove())\n      onIdle(null)\n    },\n  }\n}\n","import React, { useState, useEffect } from 'react'\nimport { useMapbox } from '../../../mapbox'\nimport CircleRenderer from './circle-renderer'\n\nconst CirclePicker = ({\n  id,\n  backgroundColor,\n  center,\n  color,\n  fontFamily,\n  fontSize,\n  radius,\n  onIdle,\n  onDrag,\n  units,\n  maxRadius,\n  minRadius,\n}) => {\n  const { map } = useMapbox()\n  const [renderer, setRenderer] = useState(null)\n\n  useEffect(() => {\n    const renderer = CircleRenderer({\n      id,\n      map,\n      onIdle,\n      onDrag,\n      initialCenter: center,\n      initialRadius: radius,\n      units,\n      maxRadius,\n      minRadius,\n    })\n\n    setRenderer(renderer)\n\n    return function cleanup() {\n      // need to check load state for fast-refresh purposes\n      if (map.loaded()) renderer.remove()\n    }\n  }, [])\n\n  return (\n    <svg\n      id={`circle-picker-${id}`}\n      style={{\n        position: 'absolute',\n        top: 0,\n        left: 0,\n        width: '100%',\n        height: '100%',\n      }}\n    >\n      <defs>\n        <clipPath id={`circle-clip-${id}`}>\n          <path id={`circle-cutout-${id}`} />\n        </clipPath>\n      </defs>\n\n      <path\n        id={`circle-${id}`}\n        stroke={color}\n        strokeWidth={1}\n        fill='transparent'\n        cursor='move'\n      />\n      <rect\n        x='0'\n        y='0'\n        width='100%'\n        height='100%'\n        clipPath={`url(#circle-clip-${id})`}\n        fill={backgroundColor}\n        fillOpacity={0.8}\n      />\n      <circle id={`handle-${id}`} r={8} fill={color} cursor='ew-resize' />\n      <line\n        id={`radius-guideline-${id}`}\n        stroke={color}\n        strokeOpacity={0}\n        strokeWidth={1}\n        strokeDasharray='3,2'\n      />\n      <g id={`radius-text-container-${id}`}>\n        <text\n          id={`radius-text-${id}`}\n          textAnchor='middle'\n          fontFamily={fontFamily}\n          fontSize={fontSize}\n          fill={color}\n        />\n      </g>\n    </svg>\n  )\n}\n\nexport default CirclePicker\n","import React, { useState, useRef, useCallback, useEffect } from 'react'\nimport CirclePicker from './circle-picker'\nimport { UPDATE_STATS_ON_DRAG } from './constants'\nimport { distance } from '@turf/turf'\nimport { v4 as uuidv4 } from 'uuid'\n\nimport { useRegionContext } from '../context'\nimport { useMapbox } from '../../mapbox'\n\nfunction getInitialRadius(map, units, minRadius, maxRadius) {\n  const bounds = map.getBounds().toArray()\n  const dist = distance(bounds[0], bounds[1], { units })\n  let radius = Math.round(dist / 15)\n  radius = minRadius ? Math.max(minRadius, radius) : radius\n  radius = maxRadius ? Math.min(maxRadius, radius) : radius\n\n  return radius\n}\n\n// TODO:\n// - accept mode (only accept mode=\"circle\" to start)\nfunction RegionPicker({\n  backgroundColor,\n  color,\n  fontFamily,\n  fontSize,\n  units = 'kilometers',\n  initialRadius: initialRadiusProp,\n  minRadius,\n  maxRadius,\n}) {\n  const { map } = useMapbox()\n  const id = useRef(uuidv4())\n  const initialCenter = useRef(map.getCenter())\n  const initialRadius = useRef(\n    initialRadiusProp || getInitialRadius(map, units, minRadius, maxRadius)\n  )\n  const { setRegion } = useRegionContext()\n\n  const [center, setCenter] = useState(initialCenter.current)\n\n  useEffect(() => {\n    return () => {\n      // Clear region when unmounted\n      setRegion(null)\n    }\n  }, [])\n\n  const handleCircle = useCallback((circle) => {\n    if (!circle) return\n    setRegion(circle)\n    setCenter(circle.properties.center)\n  }, [])\n\n  // TODO: consider extending support for degrees and radians\n  if (!['kilometers', 'miles'].includes(units)) {\n    throw new Error('Units must be one of miles, kilometers')\n  }\n\n  return (\n    <CirclePicker\n      id={id.current}\n      map={map}\n      center={initialCenter.current}\n      radius={initialRadius.current}\n      onDrag={UPDATE_STATS_ON_DRAG ? handleCircle : undefined}\n      onIdle={handleCircle}\n      backgroundColor={backgroundColor}\n      color={color}\n      units={units}\n      fontFamily={fontFamily}\n      fontSize={fontSize}\n      maxRadius={maxRadius}\n      minRadius={minRadius}\n    />\n  )\n}\n\nexport default RegionPicker\n","import { useEffect, useState } from 'react'\n\nimport { useRegion } from './region/context'\nimport { useMapbox } from './mapbox'\n\nexport const useRecenterRegion = () => {\n  const [value, setValue] = useState({ recenterRegion: () => {} })\n  const { map } = useMapbox()\n  const { region } = useRegion()\n\n  const center = region?.properties?.center\n\n  useEffect(() => {\n    setValue({ recenterRegion: () => map.easeTo({ center }) })\n  }, [center])\n\n  return value\n}\n\nexport default useRecenterRegion\n","import React, { useState, useEffect, useCallback } from 'react'\nimport { flushSync } from 'react-dom'\nimport { useMapbox } from './mapbox'\n\nexport const useControls = () => {\n  const [zoom, setZoom] = useState()\n  const [center, setCenter] = useState()\n  const { map } = useMapbox()\n\n  const updateControlsSync = useCallback(() => {\n    flushSync(() => {\n      setZoom(map.getZoom())\n      setCenter(map.getCenter())\n    })\n  }, [])\n\n  useEffect(() => {\n    setZoom(map.getZoom())\n    setCenter(map.getCenter())\n    map.on('load', updateControlsSync)\n    map.on('move', updateControlsSync)\n  }, [map])\n\n  return { center: center, zoom: zoom }\n}\n","const _sh = (mode) => {\n  return (value, which) => {\n    if (which.includes(mode)) return value\n    return ''\n  }\n}\n\nexport const vert = (mode, vars) => {\n  const sh = _sh(mode)\n\n  return `\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  #else\n  precision mediump float;\n  #endif\n  attribute vec2 position;\n  ${sh(`varying vec2 uv;`, ['texture'])}\n  ${sh(vars.map((d) => `attribute float ${d};`).join(''), ['grid', 'dotgrid'])}\n  ${sh(vars.map((d) => `varying float ${d}v;`).join(''), ['grid', 'dotgrid'])}\n  uniform vec2 camera;\n  uniform float viewportWidth;\n  uniform float viewportHeight;\n  uniform float pixelRatio;\n  uniform float zoom;\n  uniform float size;\n  uniform float globalLevel;\n  uniform float level;\n  uniform vec2 offset;\n  void main() {\n    float scale = pixelRatio * 512.0 / size;\n    float globalMag = pow(2.0, zoom - globalLevel);\n    float mag = pow(2.0, zoom - level);\n    float x = mag * (position.x + offset.x * size) - globalMag * camera.x * size ;\n    float y = mag * (position.y + offset.y * size) - globalMag * camera.y * size ;\n    x = (scale * x);\n    y = (scale * y);\n    x = (2.0 * x / viewportWidth);\n    y = -(2.0 * y / viewportHeight);\n    ${sh(`uv = vec2(position.y, position.x) / size;`, ['texture'])}\n    ${sh(vars.map((d) => `${d}v = ${d};`).join(''), ['grid', 'dotgrid'])}\n    ${sh(`gl_PointSize = 0.9 * scale * mag;`, ['grid', 'dotgrid'])}\n    gl_Position = vec4(x, y, 0.0, 1.0);\n  }`\n}\n\nexport const frag = (mode, vars, customFrag, customUniforms) => {\n  const sh = _sh(mode)\n\n  const declarations = `\n  #ifdef GL_FRAGMENT_PRECISION_HIGH\n  precision highp float;\n  #else\n  precision mediump float;\n  #endif\n  uniform float opacity;\n  uniform sampler2D colormap;\n  uniform vec2 clim;\n  uniform float fillValue;\n  ${sh(`varying vec2 uv;`, ['texture'])}\n  ${sh(vars.map((d) => `uniform sampler2D ${d};`).join(''), ['texture'])}\n  ${sh(vars.map((d) => `varying float ${d}v;`).join(''), ['grid', 'dotgrid'])}\n  ${customUniforms.map((d) => `uniform float ${d};`).join('')}\n  `\n\n  if (!customFrag)\n    return `\n    ${declarations}\n    void main() {\n      ${sh(`float ${vars[0]} = texture2D(${vars[0]}, uv).x;`, ['texture'])}\n      ${sh(`float ${vars[0]} = ${vars[0]}v;`, ['grid', 'dotgrid'])}\n      ${sh(\n        `\n      if (length(gl_PointCoord.xy - 0.5) > 0.5) {\n        discard;\n      }\n      `,\n        ['dotgrid']\n      )}\n      if (${vars[0]} == fillValue) {\n        discard;\n      }\n      float rescaled = (${vars[0]} - clim.x)/(clim.y - clim.x);\n      vec4 c = texture2D(colormap, vec2(rescaled, 1.0));  \n      gl_FragColor = vec4(c.x, c.y, c.z, opacity);\n      gl_FragColor.rgb *= gl_FragColor.a;\n    }`\n\n  if (customFrag)\n    return `\n    ${declarations}\n    void main() {\n      ${sh(\n        `${vars.map((d) => `float ${d} = texture2D(${d}, uv).x;`).join('')}`,\n        ['texture']\n      )}\n      ${sh(`${vars.map((d) => `float ${d} = ${d}v;`).join('')}`, [\n        'grid',\n        'dotgrid',\n      ])}\n      ${customFrag}\n    }`\n}\n","import { point, rhumbBearing, rhumbDestination } from '@turf/turf'\nimport { select } from 'd3-selection'\n\nconst d2r = Math.PI / 180\n\nconst clip = (v, max) => {\n  let result\n  if (v < 0) {\n    result = v + max + 1\n  } else if (v > max) {\n    result = v - max - 1\n  } else {\n    result = v\n  }\n\n  return Math.min(Math.max(result, 0), max)\n}\n\nexport const keyToTile = (key) => {\n  return key.split(',').map((d) => parseInt(d))\n}\n\nexport const tileToKey = (tile) => {\n  return tile.join(',')\n}\n\nexport const pointToTile = (lon, lat, z) => {\n  const z2 = Math.pow(2, z)\n  let tile = pointToCamera(lon, lat, z)\n  tile[0] = Math.floor(tile[0])\n  tile[1] = Math.min(Math.floor(tile[1]), z2 - 1)\n\n  return tile\n}\n\nexport const pointToCamera = (lon, lat, z) => {\n  let sin = Math.sin(lat * d2r),\n    z2 = Math.pow(2, z),\n    x = z2 * (lon / 360 + 0.5),\n    y = z2 * (0.5 - (0.25 * Math.log((1 + sin) / (1 - sin))) / Math.PI)\n\n  x = x % z2\n  y = Math.max(Math.min(y, z2), 0)\n  if (x < 0) x = x + z2\n  return [x, y, z]\n}\n\nexport const cameraToPoint = (x, y, z) => {\n  const z2 = Math.pow(2, z)\n\n  const lon = 360 * (x / z2) - 180\n\n  const y2 = 180 - (y / z2) * 360\n  const lat = (360 / Math.PI) * Math.atan(Math.exp((y2 * Math.PI) / 180)) - 90\n\n  return [lon, lat]\n}\n\nexport const zoomToLevel = (zoom, maxZoom) => {\n  if (maxZoom) return Math.min(Math.max(0, Math.floor(zoom)), maxZoom)\n  return Math.max(0, Math.floor(zoom))\n}\n\nconst getOffsets = (length, tileSize, camera) => {\n  const siblingCount = (length - tileSize) / tileSize\n\n  // Do not add offset for very small fraction of tile\n  if (Math.abs(siblingCount) < 0.001) {\n    return [0, 0]\n  }\n\n  const cameraOffset = camera - Math.floor(camera)\n  const prev = siblingCount / 2 + 0.5 - cameraOffset\n  const next = siblingCount - prev\n\n  return [-1 * Math.ceil(prev), Math.ceil(next)]\n}\n\nexport const getSiblings = (tile, { viewport, zoom, size, camera }) => {\n  const [tileX, tileY, tileZ] = tile\n  const { viewportHeight, viewportWidth } = viewport\n  const [cameraX, cameraY] = camera\n\n  const magnification = Math.pow(2, zoom - tileZ)\n  const scale = (window.devicePixelRatio * 512) / size\n  const tileSize = size * scale * magnification\n\n  const deltaX = getOffsets(viewportWidth, tileSize, cameraX)\n  const deltaY = getOffsets(viewportHeight, tileSize, cameraY)\n\n  let offsets = []\n  for (let x = deltaX[0]; x <= deltaX[1]; x++) {\n    for (let y = deltaY[0]; y <= deltaY[1]; y++) {\n      offsets.push([tileX + x, tileY + y, tileZ])\n    }\n  }\n\n  const max = Math.pow(2, tileZ) - 1\n  return offsets.reduce((accum, offset) => {\n    const [x, y, z] = offset\n    const tile = [clip(x, max), clip(y, max), z]\n    const key = tileToKey(tile)\n\n    if (!accum[key]) {\n      accum[key] = []\n    }\n\n    accum[key].push(offset)\n\n    return accum\n  }, {})\n}\n\nexport const getKeysToRender = (targetKey, tiles, maxZoom) => {\n  const ancestor = getAncestorToRender(targetKey, tiles)\n\n  if (ancestor) {\n    return [ancestor]\n  }\n\n  const descendants = getDescendantsToRender(targetKey, tiles, maxZoom)\n  if (descendants.length) {\n    return descendants\n  }\n\n  return [targetKey]\n}\n\nexport const getAncestorToRender = (targetKey, tiles) => {\n  let [x, y, z] = keyToTile(targetKey)\n  while (z >= 0) {\n    const key = tileToKey([x, y, z])\n    if (tiles[key].isBufferPopulated()) {\n      return key\n    }\n    z--\n    x = Math.floor(x / 2)\n    y = Math.floor(y / 2)\n  }\n}\n\nexport const getDescendantsToRender = (targetKey, tiles, maxZoom) => {\n  let [initialX, initialY, initialZ] = keyToTile(targetKey)\n  let [x, y, z] = [initialX, initialY, initialZ]\n  let coverage = 0\n  let descendants = []\n  while (z <= maxZoom) {\n    const delta = z - initialZ\n    const keys = []\n    for (let deltaX = 0; deltaX <= delta; deltaX++) {\n      for (let deltaY = 0; deltaY <= delta; deltaY++) {\n        keys.push(tileToKey([x + deltaX, y + deltaY, z]))\n      }\n    }\n\n    const coveringKeys = keys.filter((key) => tiles[key].isBufferPopulated())\n    const currentCoverage = coveringKeys.length / keys.length\n\n    if (coverage === 1) {\n      return keys\n    } else if (currentCoverage > coverage) {\n      descendants = keys\n    }\n\n    z++\n    x = x * 2\n    y = y * 2\n  }\n\n  return descendants\n}\n\nexport const getOverlappingAncestor = (key, renderedKeys) => {\n  const [aX, aY, aZ] = keyToTile(key)\n  const child = { x: aX, y: aY, z: aZ }\n\n  return renderedKeys.find((parentKey) => {\n    const [bX, bY, bZ] = keyToTile(parentKey)\n    const parent = { x: bX, y: bY, z: bZ }\n\n    if (child.z <= parent.z) {\n      return false\n    } else {\n      const factor = Math.pow(2, child.z - parent.z)\n\n      return (\n        Math.floor(child.x / factor) === parent.x &&\n        Math.floor(child.y / factor) === parent.y\n      )\n    }\n  })\n}\n\nexport const getAdjustedOffset = (offset, renderedKey) => {\n  const [renderedX, renderedY, renderedLevel] = keyToTile(renderedKey)\n  const [offsetX, offsetY, level] = offset\n\n  // Overall factor to scale offset by\n  const factor = Math.pow(2, level - renderedLevel)\n\n  // Factor used to calculate adjustment when rendering a descendant tile\n  const descendantFactor =\n    renderedLevel > level ? Math.pow(2, renderedLevel - level) : 1\n\n  return [\n    Math.floor(offsetX / factor) + (renderedX % descendantFactor),\n    Math.floor(offsetY / factor) + (renderedY % descendantFactor),\n  ]\n}\n\nexport const getTilesOfRegion = (region, level) => {\n  const { center, radius, units } = region.properties\n  const centralTile = pointToTile(center.lng, center.lat, level)\n\n  const tiles = new Set([tileToKey(centralTile)])\n\n  region.geometry.coordinates[0].forEach(([lng, lat]) => {\n    // Add tile along edge of region\n    const edgeTile = pointToTile(lng, lat, level)\n    tiles.add(tileToKey(edgeTile))\n\n    // Add any intermediate tiles if edge is > 1 tile away from center\n    const maxDiff = Math.max(\n      Math.abs(edgeTile[0] - centralTile[0]),\n      Math.abs(edgeTile[1] - centralTile[1])\n    )\n    if (maxDiff > 1) {\n      const centerPoint = point([center.lng, center.lat])\n      const bearing = rhumbBearing(centerPoint, point([lng, lat]))\n\n      for (let i = 1; i < maxDiff; i++) {\n        const intermediatePoint = rhumbDestination(\n          centerPoint,\n          (i * radius) / maxDiff,\n          bearing,\n          { units }\n        )\n        const intermediateTile = pointToTile(\n          intermediatePoint.geometry.coordinates[0],\n          intermediatePoint.geometry.coordinates[1],\n          level\n        )\n        tiles.add(tileToKey(intermediateTile))\n      }\n    }\n  })\n\n  return Array.from(tiles)\n}\n\nexport const getPyramidMetadata = (metadata) => {\n  const multiscales = metadata.metadata['.zattrs'].multiscales\n\n  if (!multiscales) {\n    throw new Error(\n      'Missing `multiscales` value in .zattrs. Please check your pyramid generation code.'\n    )\n  }\n\n  const datasets = multiscales[0].datasets\n\n  if (!datasets || datasets.length === 0) {\n    throw new Error(\n      'No datasets provided in `multiscales` metadata. Please check your pyramid generation code.'\n    )\n  }\n\n  const levels = datasets.map((dataset) => Number(dataset.path))\n  const maxZoom = Math.max(...levels)\n  const tileSize = datasets[0].pixels_per_tile\n\n  if (!tileSize) {\n    throw new Error(\n      'Missing required `pixels_per_tile` value in `multiscales` metadata. Please check your pyramid generation code.'\n    )\n  }\n  return { levels, maxZoom, tileSize }\n}\n\n/**\n * Given a selector, generates an Object mapping each bandName to an Object\n * representing which values of each dimension that bandName represents.\n * @param {selector} Object of {[dimension]: dimensionValue|Array<dimensionValue>} pairs\n * @returns Object containing bandName, {[dimension]: dimensionValue} pairs\n */\nexport const getBandInformation = (selector) => {\n  const combinedBands = Object.keys(selector)\n    .filter((key) => Array.isArray(selector[key]))\n    .reduce((bandMapping, selectorKey) => {\n      const values = selector[selectorKey]\n      let keys\n      if (typeof values[0] === 'string') {\n        keys = values\n      } else {\n        keys = values.map((d) => selectorKey + '_' + d)\n      }\n\n      const bands = Object.keys(bandMapping)\n      const updatedBands = {}\n      keys.forEach((key, i) => {\n        if (bands.length > 0) {\n          bands.forEach((band) => {\n            const bandKey = `${band}_${key}`\n            updatedBands[bandKey] = {\n              ...bandMapping[band],\n              [selectorKey]: values[i],\n            }\n          })\n        } else {\n          updatedBands[key] = { [selectorKey]: values[i] }\n        }\n      })\n\n      return updatedBands\n    }, {})\n\n  return combinedBands\n}\n\nexport const getBands = (variable, selector = {}) => {\n  const bandInfo = getBandInformation(selector)\n  const bandNames = Object.keys(bandInfo)\n\n  if (bandNames.length > 0) {\n    return bandNames\n  } else {\n    return [variable]\n  }\n}\n\n/**\n * Mutates a given object by adding `value` to array at nested location specified by `keys`\n * @param {obj} Object of any structure\n * @param {Array<string>} keys describing nested location where value should be set\n * @param {any} value to be added to array at location specified by keys\n * @returns reference to updated obj\n */\nexport const setObjectValues = (obj, keys, value) => {\n  let ref = obj\n  keys.forEach((key, i) => {\n    if (i === keys.length - 1) {\n      if (!ref[key]) {\n        ref[key] = []\n      }\n    } else {\n      if (!ref[key]) {\n        ref[key] = {}\n      }\n    }\n    ref = ref[key]\n  })\n\n  ref.push(value)\n  return obj\n}\n\nexport const getSelectorHash = (selector) => {\n  return JSON.stringify(selector)\n}\n\nexport const getChunks = (\n  selector,\n  dimensions,\n  coordinates,\n  shape,\n  chunks,\n  x,\n  y\n) => {\n  const chunkIndicesToUse = dimensions.map((dimension, i) => {\n    if (dimension === 'x') {\n      return [x]\n    } else if (dimension === 'y') {\n      return [y]\n    }\n\n    const selectorValue = selector[dimension]\n    const coords = coordinates[dimension]\n    const chunkSize = chunks[i]\n    let indices\n    if (Array.isArray(selectorValue)) {\n      // Return all indices of selector value when array\n      indices = selectorValue.map((v) => coords.indexOf(v))\n    } else if (selectorValue != undefined) {\n      // Return index of single selector value otherwise when present\n      indices = [coords.indexOf(selectorValue)]\n    } else {\n      // Otherwise, vary over the entire shape of the dimension\n      indices = Array(shape[i])\n        .fill(null)\n        .map((_, j) => j)\n    }\n\n    return (\n      indices\n        .map((index) => Math.floor(index / chunkSize))\n        // Filter out repeated instances of indices\n        .filter((v, i, a) => a.indexOf(v) === i)\n    )\n  })\n\n  let result = [[]]\n  chunkIndicesToUse.forEach((indices) => {\n    const updatedResult = []\n    indices.forEach((index) => {\n      result.forEach((prev) => {\n        updatedResult.push([...prev, index])\n      })\n    })\n    result = updatedResult\n  })\n\n  return result\n}\n\nexport const getPositions = (size, mode) => {\n  let position = []\n  if (mode === 'grid' || mode === 'dotgrid') {\n    for (let i = 0; i < size; i++) {\n      for (let j = 0; j < size; j++) {\n        position.push([j + 0.5, i + 0.5])\n      }\n    }\n  }\n  if (mode === 'texture') {\n    position = [\n      0.0,\n      0.0,\n      0.0,\n      size,\n      size,\n      0.0,\n      size,\n      0.0,\n      0.0,\n      size,\n      size,\n      size,\n    ]\n  }\n  return position\n}\n\nexport const updatePaintProperty = (map, ref, key, value) => {\n  const { current: id } = ref\n  if (map.getLayer(id)) {\n    map.setPaintProperty(id, key, value)\n  }\n}\n","// mirrors https://github.com/carbonplan/ndpyramid/blob/41f2bedeb3297db7e299285ca43363f9c0c1a65e/ndpyramid/utils.py#L14-L25\nexport const DEFAULT_FILL_VALUES = {\n  '|S1': '\\x00',\n  '<i1': -127,\n  '|u1': 255,\n  '<i2': -32767,\n  '<u2': 65535,\n  '<i4': -2147483647,\n  '<u4': 4294967295,\n  // '<i8': -9223372036854775806,\n  '<u8': 18446744073709551614,\n  '<f4': 9.969209968386869e36,\n  '<f8': 9.969209968386869e36,\n}\n","import {\n  getBandInformation,\n  getChunks,\n  keyToTile,\n  getSelectorHash,\n} from './utils'\n\nclass Tile {\n  constructor({\n    key,\n    loader,\n    shape,\n    chunks,\n    dimensions,\n    coordinates,\n    bands,\n    initializeBuffer,\n  }) {\n    this.key = key\n    this.tileCoordinates = keyToTile(key)\n\n    this.shape = shape\n    this.chunks = chunks\n    this.dimensions = dimensions\n    this.coordinates = coordinates\n    this.bands = bands\n\n    this._bufferCache = null\n    this._buffers = {}\n\n    this._loading = {}\n    this._ready = {}\n\n    bands.forEach((k) => {\n      this._buffers[k] = initializeBuffer()\n    })\n\n    this.chunkedData = {}\n\n    this._loader = loader\n  }\n\n  getBuffers() {\n    return this._buffers\n  }\n\n  async loadChunks(chunks) {\n    const updated = await Promise.all(\n      chunks.map(\n        (chunk) =>\n          new Promise((resolve) => {\n            const key = chunk.join('.')\n            if (this.chunkedData[key]) {\n              resolve(false)\n            } else {\n              this._loading[key] = true\n              this._ready[key] = new Promise((innerResolve) => {\n                this._loader(chunk, (err, data) => {\n                  this.chunkedData[key] = data\n                  this._loading[key] = false\n                  innerResolve(true)\n                  resolve(true)\n                })\n              })\n            }\n          })\n      )\n    )\n\n    return updated.some(Boolean)\n  }\n\n  async populateBuffers(chunks, selector) {\n    const updated = await this.loadChunks(chunks)\n\n    this.populateBuffersSync(selector)\n\n    return updated\n  }\n\n  populateBuffersSync(selector) {\n    const bandInformation = getBandInformation(selector)\n\n    this.bands.forEach((band) => {\n      const info = bandInformation[band] || selector\n      const chunks = getChunks(\n        info,\n        this.dimensions,\n        this.coordinates,\n        this.shape,\n        this.chunks,\n        this.tileCoordinates[0],\n        this.tileCoordinates[1]\n      )\n\n      if (chunks.length !== 1) {\n        throw new Error(\n          `Expected 1 chunk for band '${band}', found ${\n            chunks.length\n          }: ${chunks.join(', ')}`\n        )\n      }\n      const chunk = chunks[0]\n      const chunkKey = chunk.join('.')\n      const data = this.chunkedData[chunkKey]\n\n      if (!data) {\n        throw new Error(`Missing data for chunk: ${chunkKey}`)\n      }\n\n      let bandData = data\n      if (info) {\n        const indices = this.dimensions\n          .map((d) => (['x', 'y'].includes(d) ? null : d))\n          .map((d, i) => {\n            if (info[d] === undefined) {\n              return null\n            } else {\n              const value = info[d]\n              return (\n                this.coordinates[d].findIndex(\n                  (coordinate) => coordinate === value\n                ) % this.chunks[i]\n              )\n            }\n          })\n\n        bandData = data.pick(...indices)\n      }\n\n      if (bandData.dimension !== 2) {\n        throw new Error(\n          `Unexpected data dimensions for band: ${band}. Found ${bandData.dimension}, expected 2. Check the selector value.`\n        )\n      }\n      this._buffers[band](bandData)\n    })\n\n    this._bufferCache = getSelectorHash(selector)\n  }\n\n  isBufferPopulated() {\n    return !!this._bufferCache\n  }\n\n  isLoading() {\n    return Object.keys(this._loading).some((key) => this._loading[key])\n  }\n\n  isLoadingChunks(chunks) {\n    return chunks.every((chunk) => this._loading[chunk.join('.')])\n  }\n\n  async chunksLoaded(chunks) {\n    await Promise.all(chunks.map((chunk) => this._ready[chunk.join('.')]))\n\n    return true\n  }\n\n  hasLoadedChunks(chunks) {\n    return chunks.every((chunk) => this.chunkedData[chunk.join('.')])\n  }\n\n  hasPopulatedBuffer(selector) {\n    return (\n      !!this._bufferCache && this._bufferCache === getSelectorHash(selector)\n    )\n  }\n\n  getPointValues({ selector, point: [x, y] }) {\n    const result = []\n    const chunks = getChunks(\n      selector,\n      this.dimensions,\n      this.coordinates,\n      this.shape,\n      this.chunks,\n      this.tileCoordinates[0],\n      this.tileCoordinates[1]\n    )\n\n    chunks.forEach((chunk) => {\n      const key = chunk.join('.')\n      const chunkData = this.chunkedData[key]\n\n      if (!chunkData) {\n        throw new Error(`Missing data for chunk: ${key}`)\n      }\n\n      const combinedIndices = this.chunks.reduce(\n        (accum, count, i) => {\n          const dimension = this.dimensions[i]\n          const chunkOffset = chunk[i] * count\n\n          if (dimension === 'x') {\n            return accum.map((prev) => [...prev, x])\n          } else if (dimension === 'y') {\n            return accum.map((prev) => [...prev, y])\n          } else if (selector.hasOwnProperty(dimension)) {\n            const selectorValues = Array.isArray(selector[dimension])\n              ? selector[dimension]\n              : [selector[dimension]]\n            const selectorIndices = selectorValues\n              .map((value) => this.coordinates[dimension].indexOf(value))\n              .filter(\n                (index) => chunkOffset <= index && index < chunkOffset + count\n              )\n\n            return selectorIndices.reduce((a, index) => {\n              return a.concat(accum.map((prev) => [...prev, index]))\n            }, [])\n          } else {\n            let updatedAccum = []\n\n            for (let j = 0; j < count; j++) {\n              const index = chunkOffset + j\n              updatedAccum = updatedAccum.concat(\n                accum.map((prev) => [...prev, index])\n              )\n            }\n\n            return updatedAccum\n          }\n        },\n        [[]]\n      )\n\n      combinedIndices.forEach((indices) => {\n        const keys = indices.reduce((accum, el, i) => {\n          const coordinates = this.coordinates[this.dimensions[i]]\n          const selectorValue = selector[this.dimensions[i]]\n\n          if (\n            coordinates &&\n            (Array.isArray(selectorValue) || selectorValue == undefined)\n          ) {\n            accum.push(coordinates[el])\n          }\n\n          return accum\n        }, [])\n        const chunkIndices = indices.map((el, i) =>\n          ['x', 'y'].includes(this.dimensions[i])\n            ? el\n            : el - chunk[i] * this.chunks[i]\n        )\n        result.push({\n          keys,\n          value: chunkData.get(...chunkIndices),\n        })\n      })\n    })\n\n    return result\n  }\n}\n\nexport default Tile\n","import zarr from 'zarr-js'\nimport ndarray from 'ndarray'\nimport { distance } from '@turf/turf'\n\nimport { vert, frag } from './shaders'\nimport {\n  zoomToLevel,\n  keyToTile,\n  pointToCamera,\n  pointToTile,\n  getPositions,\n  getSiblings,\n  getKeysToRender,\n  getAdjustedOffset,\n  getOverlappingAncestor,\n  cameraToPoint,\n  getTilesOfRegion,\n  getPyramidMetadata,\n  getBands,\n  setObjectValues,\n  getChunks,\n  getSelectorHash,\n} from './utils'\nimport { DEFAULT_FILL_VALUES } from './constants'\nimport Tile from './tile'\n\nexport const createTiles = (regl, opts) => {\n  return new Tiles(opts)\n\n  function Tiles({\n    source,\n    colormap,\n    clim,\n    opacity,\n    display,\n    variable,\n    selector = {},\n    uniforms: customUniforms = {},\n    frag: customFrag,\n    fillValue,\n    mode = 'texture',\n    setLoading,\n    clearLoading,\n    invalidate,\n    invalidateRegion,\n    setMetadata,\n  }) {\n    this.tiles = {}\n    this.loaders = {}\n    this.active = {}\n    this.display = display\n    this.clim = clim\n    this.opacity = opacity\n    this.selector = selector\n    this.variable = variable\n    this.fillValue = fillValue\n    this.invalidate = invalidate\n    this.viewport = { viewportHeight: 0, viewportWidth: 0 }\n    this._loading = false\n    this.setLoading = setLoading\n    this.clearLoading = clearLoading\n\n    this.colormap = regl.texture({\n      data: colormap,\n      format: 'rgb',\n      shape: [colormap.length, 1],\n    })\n\n    const validModes = ['grid', 'dotgrid', 'texture']\n    if (!validModes.includes(mode)) {\n      throw Error(\n        `mode '${mode}' invalid, must be one of ${validModes.join(', ')}`\n      )\n    }\n\n    this.bands = getBands(variable, selector)\n\n    customUniforms = Object.keys(customUniforms)\n\n    let primitive,\n      initialize,\n      attributes = {},\n      uniforms = {}\n\n    if (mode === 'grid' || mode === 'dotgrid') {\n      primitive = 'points'\n      initialize = () => regl.buffer()\n      this.bands.forEach((k) => (attributes[k] = regl.prop(k)))\n      uniforms = {}\n    }\n\n    if (mode === 'texture') {\n      primitive = 'triangles'\n      this.bands.forEach((k) => (uniforms[k] = regl.prop(k)))\n    }\n\n    customUniforms.forEach((k) => (uniforms[k] = regl.this(k)))\n\n    this.initialized = new Promise((resolve) => {\n      const loadingID = this.setLoading('metadata')\n      zarr().openGroup(source, (err, loaders, metadata) => {\n        if (setMetadata) setMetadata(metadata)\n        const { levels, maxZoom, tileSize } = getPyramidMetadata(metadata)\n        this.maxZoom = maxZoom\n        const position = getPositions(tileSize, mode)\n        this.position = regl.buffer(position)\n        this.size = tileSize\n        if (mode === 'grid' || mode === 'dotgrid') {\n          this.count = position.length\n        }\n        if (mode === 'texture') {\n          this.count = 6\n        }\n\n        const attrs = metadata.metadata[`${levels[0]}/${variable}/.zattrs`]\n        const array = metadata.metadata[`${levels[0]}/${variable}/.zarray`]\n\n        this.dimensions = attrs['_ARRAY_DIMENSIONS']\n        this.shape = array['shape']\n        this.chunks = array['chunks']\n\n        this.fillValue =\n          fillValue ??\n          array['fill_value'] ??\n          DEFAULT_FILL_VALUES[array['dtype']]\n\n        if (mode === 'texture') {\n          const emptyTexture = ndarray(\n            new Float32Array(Array(1).fill(this.fillValue)),\n            [1, 1]\n          )\n          initialize = () => regl.texture(emptyTexture)\n        }\n\n        this.ndim = this.dimensions.length\n\n        this.coordinates = {}\n        Promise.all(\n          Object.keys(selector).map(\n            (key) =>\n              new Promise((innerResolve) => {\n                loaders[`${levels[0]}/${key}`]([0], (err, chunk) => {\n                  const coordinates = Array.from(chunk.data)\n                  this.coordinates[key] = coordinates\n                  innerResolve()\n                })\n              })\n          )\n        ).then(() => {\n          levels.forEach((z) => {\n            const loader = loaders[z + '/' + variable]\n            this.loaders[z] = loader\n            Array(Math.pow(2, z))\n              .fill(0)\n              .map((_, x) => {\n                Array(Math.pow(2, z))\n                  .fill(0)\n                  .map((_, y) => {\n                    const key = [x, y, z].join(',')\n                    this.tiles[key] = new Tile({\n                      key,\n                      loader,\n                      shape: this.shape,\n                      chunks: this.chunks,\n                      dimensions: this.dimensions,\n                      coordinates: this.coordinates,\n                      bands: this.bands,\n                      initializeBuffer: initialize,\n                    })\n                  })\n              })\n          })\n\n          resolve(true)\n          this.clearLoading(loadingID)\n          this.invalidate()\n        })\n      })\n    })\n\n    this.drawTiles = regl({\n      vert: vert(mode, this.bands),\n\n      frag: frag(mode, this.bands, customFrag, customUniforms),\n\n      attributes: {\n        position: regl.this('position'),\n        ...attributes,\n      },\n\n      uniforms: {\n        viewportWidth: regl.context('viewportWidth'),\n        viewportHeight: regl.context('viewportHeight'),\n        pixelRatio: regl.context('pixelRatio'),\n        colormap: regl.this('colormap'),\n        camera: regl.this('camera'),\n        size: regl.this('size'),\n        zoom: regl.this('zoom'),\n        globalLevel: regl.this('level'),\n        level: regl.prop('level'),\n        offset: regl.prop('offset'),\n        clim: regl.this('clim'),\n        opacity: regl.this('opacity'),\n        fillValue: regl.this('fillValue'),\n        ...uniforms,\n      },\n\n      blend: {\n        enable: true,\n        func: {\n          src: 'one',\n          srcAlpha: 'one',\n          dstRGB: 'one minus src alpha',\n          dstAlpha: 'one minus src alpha',\n        },\n      },\n\n      depth: { enable: false },\n\n      count: regl.this('count'),\n\n      primitive: primitive,\n    })\n\n    this.getProps = () => {\n      const adjustedActive = Object.keys(this.tiles)\n        .filter((key) => this.active[key])\n        .reduce((accum, key) => {\n          const keysToRender = getKeysToRender(key, this.tiles, this.maxZoom)\n          keysToRender.forEach((keyToRender) => {\n            const offsets = this.active[key]\n\n            offsets.forEach((offset) => {\n              const adjustedOffset = getAdjustedOffset(offset, keyToRender)\n              if (!accum[keyToRender]) {\n                accum[keyToRender] = []\n              }\n\n              const alreadySeenOffset = accum[keyToRender].find(\n                (prev) =>\n                  prev[0] === adjustedOffset[0] && prev[1] === adjustedOffset[1]\n              )\n              if (!alreadySeenOffset) {\n                accum[keyToRender].push(adjustedOffset)\n              }\n            })\n          })\n\n          return accum\n        }, {})\n\n      const activeKeys = Object.keys(adjustedActive)\n\n      return activeKeys.reduce((accum, key) => {\n        if (!getOverlappingAncestor(key, activeKeys)) {\n          const [, , level] = keyToTile(key)\n          const tile = this.tiles[key]\n          const offsets = adjustedActive[key]\n\n          offsets.forEach((offset) => {\n            accum.push({\n              ...tile.getBuffers(),\n              level,\n              offset,\n            })\n          })\n        }\n\n        return accum\n      }, [])\n    }\n\n    regl.frame(({ viewportHeight, viewportWidth }) => {\n      if (\n        this.viewport.viewportHeight !== viewportHeight ||\n        this.viewport.viewportWidth !== viewportWidth\n      ) {\n        this.viewport = { viewportHeight, viewportWidth }\n        this.invalidate()\n      }\n    })\n\n    this.draw = () => {\n      this.drawTiles(this.getProps())\n    }\n\n    this.updateCamera = ({ center, zoom }) => {\n      const level = zoomToLevel(zoom, this.maxZoom)\n      const tile = pointToTile(center.lng, center.lat, level)\n      const camera = pointToCamera(center.lng, center.lat, level)\n\n      this.level = level\n      this.zoom = zoom\n      this.camera = [camera[0], camera[1]]\n\n      this.active = getSiblings(tile, {\n        viewport: this.viewport,\n        zoom,\n        camera: this.camera,\n        size: this.size,\n      })\n\n      if (this.size && Object.keys(this.active).length === 0) {\n        this.clearLoading(null, { forceClear: true })\n      }\n\n      Promise.all(\n        Object.keys(this.active).map(\n          (key) =>\n            new Promise((resolve) => {\n              if (this.loaders[level]) {\n                const tileIndex = keyToTile(key)\n                const tile = this.tiles[key]\n\n                const chunks = getChunks(\n                  this.selector,\n                  this.dimensions,\n                  this.coordinates,\n                  this.shape,\n                  this.chunks,\n                  tileIndex[0],\n                  tileIndex[1]\n                )\n                const initialHash = getSelectorHash(this.selector)\n\n                if (tile.hasPopulatedBuffer(this.selector)) {\n                  resolve(false)\n                  return\n                }\n\n                if (tile.isLoadingChunks(chunks)) {\n                  // If tile is already loading all chunks...\n                  tile.chunksLoaded(chunks).then(() => {\n                    // ...wait for ready state and populate buffers if selector is still relevant.\n                    if (initialHash === getSelectorHash(this.selector)) {\n                      tile.populateBuffersSync(this.selector)\n                      this.invalidate()\n                      resolve(false)\n                    } else {\n                      resolve(false)\n                    }\n                  })\n                } else {\n                  // Otherwise, immediately kick off fetch or populate buffers.\n                  if (tile.hasLoadedChunks(chunks)) {\n                    tile.populateBuffersSync(this.selector)\n                    this.invalidate()\n                    resolve(false)\n                  } else {\n                    const loadingID = this.setLoading('chunk')\n                    tile\n                      .populateBuffers(chunks, this.selector)\n                      .then((dataUpdated) => {\n                        this.invalidate()\n                        resolve(dataUpdated)\n                        this.clearLoading(loadingID)\n                      })\n                  }\n                }\n              }\n            })\n        )\n      ).then((results) => {\n        if (results.some(Boolean)) {\n          invalidateRegion()\n        }\n      })\n    }\n\n    this.queryRegion = async (region, selector) => {\n      await this.initialized\n\n      const tiles = getTilesOfRegion(region, this.level)\n\n      await Promise.all(\n        tiles.map(async (key) => {\n          const tileIndex = keyToTile(key)\n          const chunks = getChunks(\n            selector,\n            this.dimensions,\n            this.coordinates,\n            this.shape,\n            this.chunks,\n            tileIndex[0],\n            tileIndex[1]\n          )\n\n          if (!this.tiles[key].hasLoadedChunks(chunks)) {\n            const loadingID = this.setLoading('chunk')\n            await this.tiles[key].loadChunks(chunks)\n            this.clearLoading(loadingID)\n          }\n        })\n      )\n\n      let results,\n        lat = [],\n        lon = []\n      const resultDim =\n        this.ndim -\n        Object.keys(selector).filter((k) => !Array.isArray(selector[k])).length\n      if (resultDim > 2) {\n        results = {}\n      } else {\n        results = []\n      }\n\n      tiles.map((key) => {\n        const [x, y, z] = keyToTile(key)\n        const { center, radius, units } = region.properties\n        for (let i = 0; i < this.size; i++) {\n          for (let j = 0; j < this.size; j++) {\n            const pointCoords = cameraToPoint(\n              x + i / this.size,\n              y + j / this.size,\n              z\n            )\n            const distanceToCenter = distance(\n              [center.lng, center.lat],\n              pointCoords,\n              {\n                units,\n              }\n            )\n            if (distanceToCenter < radius) {\n              lon.push(pointCoords[0])\n              lat.push(pointCoords[1])\n\n              const valuesToSet = this.tiles[key].getPointValues({\n                selector,\n                point: [i, j],\n              })\n\n              valuesToSet.forEach(({ keys, value }) => {\n                if (keys.length > 0) {\n                  setObjectValues(results, keys, value)\n                } else {\n                  results.push(value)\n                }\n              })\n            }\n          }\n        }\n      })\n\n      const out = { [this.variable]: results }\n\n      if (this.ndim > 2) {\n        out.dimensions = this.dimensions.map((d) => {\n          if (d === 'x') {\n            return 'lon'\n          } else if (d === 'y') {\n            return 'lat'\n          } else {\n            return d\n          }\n        })\n\n        out.coordinates = this.dimensions.reduce(\n          (coords, d) => {\n            if (d !== 'x' && d !== 'y') {\n              if (selector.hasOwnProperty(d)) {\n                coords[d] = Array.isArray(selector[d])\n                  ? selector[d]\n                  : [selector[d]]\n              } else {\n                coords[d] = this.coordinates[d]\n              }\n            }\n\n            return coords\n          },\n          { lat, lon }\n        )\n      } else {\n        out.dimensions = ['lat', 'lon']\n        out.coordinates = { lat, lon }\n      }\n\n      return out\n    }\n\n    this.updateSelector = ({ selector }) => {\n      this.selector = selector\n      this.invalidate()\n    }\n\n    this.updateUniforms = (props) => {\n      Object.keys(props).forEach((k) => {\n        this[k] = props[k]\n      })\n      if (!this.display) {\n        this.opacity = 0\n      }\n      this.invalidate()\n    }\n\n    this.updateColormap = ({ colormap }) => {\n      this.colormap = regl.texture({\n        data: colormap,\n        format: 'rgb',\n        shape: [colormap.length, 1],\n      })\n      this.invalidate()\n    }\n  }\n}\n","import React, { useRef, useEffect, useState } from 'react'\nimport { useRegl } from './regl'\nimport { useMapbox } from './mapbox'\nimport { useControls } from './use-controls'\nimport { createTiles } from './tiles'\nimport { useRegion } from './region/context'\nimport { useSetLoading } from './loading'\n\nconst Raster = (props) => {\n  const {\n    display = true,\n    opacity = 1,\n    clim,\n    colormap,\n    index = 0,\n    regionOptions = {},\n    selector = {},\n    uniforms = {},\n  } = props\n  const { center, zoom } = useControls()\n  const [regionDataInvalidated, setRegionDataInvalidated] = useState(\n    new Date().getTime()\n  )\n  const { regl } = useRegl()\n  const { map } = useMapbox()\n  const { region } = useRegion()\n  const { setLoading, clearLoading, loading, chunkLoading, metadataLoading } =\n    useSetLoading()\n  const tiles = useRef()\n  const camera = useRef()\n  const lastQueried = useRef()\n\n  camera.current = { center: center, zoom: zoom }\n\n  const queryRegion = async (r, s) => {\n    const queryStart = new Date().getTime()\n    lastQueried.current = queryStart\n\n    regionOptions.setData({ value: null })\n\n    const data = await tiles.current.queryRegion(r, s)\n\n    // Invoke callback as long as a more recent query has not already been initiated\n    if (lastQueried.current === queryStart) {\n      regionOptions.setData({ value: data })\n    }\n  }\n\n  useEffect(() => {\n    tiles.current = createTiles(regl, {\n      ...props,\n      setLoading,\n      clearLoading,\n      invalidate: () => {\n        map.triggerRepaint()\n      },\n      invalidateRegion: () => {\n        setRegionDataInvalidated(new Date().getTime())\n      },\n    })\n  }, [])\n\n  useEffect(() => {\n    if (props.setLoading) {\n      props.setLoading(loading)\n    }\n  }, [!!props.setLoading, loading])\n  useEffect(() => {\n    if (props.setMetadataLoading) {\n      props.setMetadataLoading(metadataLoading)\n    }\n  }, [!!props.setMetadataLoading, metadataLoading])\n  useEffect(() => {\n    if (props.setChunkLoading) {\n      props.setChunkLoading(chunkLoading)\n    }\n  }, [!!props.setChunkLoading, chunkLoading])\n\n  useEffect(() => {\n    const callback = () => {\n      if (Object.values(camera.current).some(Boolean)) {\n        tiles.current.updateCamera(camera.current)\n        tiles.current.draw()\n      }\n    }\n    map.on('render', callback)\n\n    return () => {\n      regl.clear({\n        color: [0, 0, 0, 0],\n        depth: 1,\n      })\n      map.off('render', callback)\n      map.triggerRepaint()\n    }\n  }, [index])\n\n  useEffect(() => {\n    tiles.current.updateSelector({ selector })\n  }, Object.values(selector))\n\n  useEffect(() => {\n    tiles.current.updateUniforms({ display, opacity, clim, ...uniforms })\n  }, [display, opacity, clim, ...Object.values(uniforms)])\n\n  useEffect(() => {\n    tiles.current.updateColormap({ colormap })\n  }, [colormap])\n\n  useEffect(() => {\n    if (region && regionOptions?.setData) {\n      queryRegion(region, regionOptions.selector || selector)\n    }\n  }, [\n    regionOptions?.setData,\n    region,\n    regionDataInvalidated,\n    ...Object.values(regionOptions?.selector || selector || {}),\n  ])\n\n  return null\n}\n\nexport default Raster\n","import { useEffect, useRef } from 'react'\nimport { useMapbox } from './mapbox'\nimport { updatePaintProperty } from './utils'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst Line = ({\n  source,\n  variable,\n  color,\n  id,\n  maxZoom = 5,\n  opacity = 1,\n  blur = 0.4,\n  width = 0.5,\n}) => {\n  const { map } = useMapbox()\n  const removed = useRef(false)\n\n  const sourceIdRef = useRef()\n  const layerIdRef = useRef()\n\n  useEffect(() => {\n    map.on('remove', () => {\n      removed.current = true\n    })\n  }, [])\n\n  useEffect(() => {\n    sourceIdRef.current = id || uuidv4()\n    const { current: sourceId } = sourceIdRef\n    if (!map.getSource(sourceId)) {\n      map.addSource(sourceId, {\n        type: 'vector',\n        tiles: [`${source}/{z}/{x}/{y}.pbf`],\n      })\n      if (maxZoom) {\n        map.getSource(sourceId).maxzoom = maxZoom\n      }\n    }\n  }, [id])\n\n  useEffect(() => {\n    const layerId = layerIdRef.current || uuidv4()\n    layerIdRef.current = layerId\n    const { current: sourceId } = sourceIdRef\n    if (!map.getLayer(layerId)) {\n      map.addLayer({\n        id: layerId,\n        type: 'line',\n        source: sourceId,\n        'source-layer': variable,\n        layout: { visibility: 'visible' },\n        paint: {\n          'line-blur': blur,\n          'line-color': color,\n          'line-opacity': opacity,\n          'line-width': width,\n        },\n      })\n    }\n\n    return () => {\n      if (!removed.current) {\n        if (map.getLayer(layerId)) {\n          map.removeLayer(layerId)\n        }\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    updatePaintProperty(map, layerIdRef, 'line-color', color)\n  }, [color])\n\n  useEffect(() => {\n    updatePaintProperty(map, layerIdRef, 'line-opacity', opacity)\n  }, [opacity])\n\n  useEffect(() => {\n    updatePaintProperty(map, layerIdRef, 'line-width', width)\n  }, [width])\n\n  useEffect(() => {\n    updatePaintProperty(map, layerIdRef, 'line-blur', blur)\n  }, [blur])\n\n  return null\n}\n\nexport default Line\n","import { useEffect, useRef } from 'react'\nimport { useMapbox } from './mapbox'\nimport { updatePaintProperty } from './utils'\nimport { v4 as uuidv4 } from 'uuid'\n\nconst Fill = ({ source, variable, color, id, maxZoom = 5, opacity = 1 }) => {\n  const { map } = useMapbox()\n  const removed = useRef(false)\n\n  const sourceIdRef = useRef()\n  const layerIdRef = useRef()\n\n  useEffect(() => {\n    map.on('remove', () => {\n      removed.current = true\n    })\n  }, [])\n\n  useEffect(() => {\n    sourceIdRef.current = id || uuidv4()\n    const { current: sourceId } = sourceIdRef\n    if (!map.getSource(sourceId)) {\n      map.addSource(sourceId, {\n        type: 'vector',\n        tiles: [`${source}/{z}/{x}/{y}.pbf`],\n      })\n      if (maxZoom) {\n        map.getSource(sourceId).maxzoom = maxZoom\n      }\n    }\n  }, [id])\n\n  useEffect(() => {\n    layerIdRef.current = uuidv4()\n    const { current: layerId } = layerIdRef\n    const { current: sourceId } = sourceIdRef\n    if (!map.getLayer(layerId)) {\n      map.addLayer({\n        id: layerId,\n        type: 'fill',\n        source: sourceId,\n        'source-layer': variable,\n        layout: { visibility: 'visible' },\n        paint: {\n          'fill-color': color,\n          'fill-opacity': opacity,\n        },\n      })\n    }\n\n    return () => {\n      if (!removed.current) {\n        if (map.getLayer(layerId)) {\n          map.removeLayer(layerId)\n        }\n      }\n    }\n  }, [])\n\n  useEffect(() => {\n    updatePaintProperty(map, layerIdRef, 'fill-color', color)\n  }, [color])\n\n  useEffect(() => {\n    updatePaintProperty(map, layerIdRef, 'fill-opacity', opacity)\n  }, [opacity])\n\n  return null\n}\n\nexport default Fill\n","import { useEffect } from 'react'\nimport { ticks } from 'd3-array'\nimport { axisBottom, axisLeft } from 'd3-axis'\nimport { scaleOrdinal } from 'd3-scale'\nimport { select } from 'd3-selection'\n\nimport { useMapbox } from './mapbox'\n\nconst TICK_SEPARATION = 150 // target distance between ticks\nconst TICK_SIZE = 6 // tick length\nconst TICK_MARGIN = 2 // distance between gridlines and tick text\n\nfunction useRuler({\n  showAxes = true,\n  showGrid = false,\n  fontFamily,\n  gridColor,\n}) {\n  const { map } = useMapbox()\n\n  useEffect(() => {\n    if (!showAxes && !showGrid) {\n      return\n    }\n\n    let rulerContainer = null\n    let setRulerTicks = null\n\n    function addRuler() {\n      const mapContainer = map.getContainer()\n      const height = mapContainer.offsetHeight\n      const width = mapContainer.offsetWidth\n      const numXTicks = width / TICK_SEPARATION\n      const numYTicks = height / TICK_SEPARATION\n\n      rulerContainer = select(mapContainer)\n        .append('svg')\n        .classed('ruler', true)\n        .attr('width', width)\n        .attr('height', height)\n        .style('position', 'absolute')\n        .style('top', 0)\n        .style('left', 0)\n        .style('pointer-events', 'none')\n\n      // x-axis\n      const gx = rulerContainer\n        .append('g')\n        .classed('ruler-axis', true)\n        .style('font-size', '14px')\n        .style('font-family', fontFamily)\n\n      const xAxis = (g, x) =>\n        g\n          .call(\n            axisBottom(x)\n              .tickValues(x.domain())\n              .tickFormat((d) => `${d}°`)\n              .tickSize(TICK_SIZE)\n          )\n          .call((g) => g.select('.domain').remove())\n\n      // y-axis\n      const gy = rulerContainer\n        .append('g')\n        .classed('ruler-axis', true)\n        .attr('transform', `translate(${width},0)`)\n        .style('font-size', '14px')\n        .style('font-family', fontFamily)\n\n      const yAxis = (g, y) =>\n        g\n          .call(\n            axisLeft(y)\n              .tickValues(y.domain())\n              .tickFormat((d) => `${d}°`)\n              .tickSize(TICK_SIZE)\n          )\n          .call((g) => g.select('.domain').remove())\n\n      // grid\n      const { gGrid, grid } = showGrid\n        ? {\n            gGrid: rulerContainer\n              .append('g')\n              .classed('ruler-grid', true)\n              .style('stroke', gridColor)\n              .style('stroke-dasharray', '3,2')\n              .style('stroke-opacity', 0.8),\n\n            grid: (g, x, y) => {\n              const xTickHeight = gx.node().getBoundingClientRect().height\n              const yTickNodes = gy.selectAll('.tick').nodes()\n              return g\n                .call((g) =>\n                  g\n                    .selectAll('.x')\n                    .data(x.domain())\n                    .join(\n                      (enter) =>\n                        enter\n                          .append('line')\n                          .classed('x', true)\n                          .attr('y1', xTickHeight + TICK_MARGIN)\n                          .attr('y2', height),\n                      (update) => update,\n                      (exit) => exit.remove()\n                    )\n                    .attr('x1', (d) => 0.5 + x(d))\n                    .attr('x2', (d) => 0.5 + x(d))\n                )\n                .call((g) =>\n                  g\n                    .selectAll('.y')\n                    .data(y.domain())\n                    .join(\n                      (enter) => enter.append('line').classed('y', true),\n                      (update) => update,\n                      (exit) => exit.remove()\n                    )\n                    .attr('y1', (d) => 0.5 + y(d))\n                    .attr('y2', (d) => 0.5 + y(d))\n                    .attr('x2', (d, i) => {\n                      const yTickWidth = yTickNodes[i]\n                        ? yTickNodes[i].getBoundingClientRect().width\n                        : 0\n                      return width - yTickWidth - TICK_MARGIN\n                    })\n                )\n            },\n          }\n        : {\n            gGrid: null,\n            grid: null,\n          }\n\n      // the important bit\n      setRulerTicks = () => {\n        const b = map.getBounds()\n\n        const xDomain = ticks(b.getWest(), b.getEast(), numXTicks)\n        const xRange = xDomain.map((lng) => map.project([lng, 0]).x)\n        const x = scaleOrdinal().domain(xDomain).range(xRange)\n\n        const yDomain = ticks(b.getNorth(), b.getSouth(), numYTicks)\n        const yRange = yDomain.map((lat) => map.project([0, lat]).y)\n        const y = scaleOrdinal().domain(yDomain).range(yRange)\n\n        if (showAxes) {\n          gx.call(xAxis, x)\n          gy.call(yAxis, y)\n        }\n        if (showGrid) {\n          gGrid.call(grid, x, y)\n        }\n      }\n\n      setRulerTicks()\n      map.on('move', setRulerTicks)\n    }\n\n    function removeRuler() {\n      if (rulerContainer) {\n        rulerContainer.remove()\n      }\n      if (setRulerTicks) {\n        map.off('move', setRulerTicks)\n      }\n    }\n\n    function resetRuler() {\n      removeRuler()\n      addRuler()\n    }\n\n    addRuler()\n    map.on('resize', resetRuler)\n\n    return function cleanup() {\n      removeRuler()\n      map.off('resize', resetRuler)\n    }\n  }, [showAxes, showGrid, fontFamily, gridColor])\n}\n\nexport default useRuler\n"],"names":["MapboxContext","createContext","useMapbox","useContext","Mapbox","_ref","glyphs","style","center","zoom","minZoom","maxZoom","maxBounds","debug","children","map","useRef","_useState","useState","ready","setReady","ref","useCallback","node","mapboxStyle","version","sources","layers","current","mapboxgl","Map","container","dragRotate","pitchWithRotate","touchZoomRotate","setCenter","setZoom","disableRotation","touchPitch","disable","on","useEffect","remove","showTileBoundaries","React","createElement","Provider","value","_extends","top","bottom","position","width","ReglContext","useRegl","Regl","regl","_regl","extensions","destroy","height","RegionContext","region","onChange","Error","useRegionContext","useRegion","_useContext","RegionProvider","setRegion","LoadingContext","useSetLoading","loadingId","uuidv4","loading","dispatch","Set","metadataIds","setMetadataIds","_useState2","chunkIds","setChunkIds","loaders","id","key","forEach","push","type","size","setLoading","includes","setter","prev","add","clearLoading","_temp","forceClear","prevMetadata","prevChunk","metadataLoading","chunkLoading","reducer","state","action","_ref2","_ref3","LoadingProvider","_ref4","_useReducer","useReducer","metadata","chunk","useLoadingContext","_useContext2","LoadingUpdater","setMetadataLoading","setChunkLoading","_useLoadingContext","tabIndex","className","overflow","pointerEvents","zIndex","project","coordinates","options","ll","LngLat","convert","result","_options","referencePoint","deltas","delta","alternate","lat","lng","Math","abs","x","getPathMaker","transform","geoTransform","point","stream","y","geoPath","projection","CursorManager","canvas","getCanvas","originalStyle","cursor","mouseState","onHandle","draggingHandle","onCircle","draggingCircle","setCursor","newState","POLES","abbreviations","kilometers","miles","CircleRenderer","_ref$onIdle","onIdle","circle","_ref$onDrag","onDrag","_ref$initialCenter","initialCenter","_ref$initialRadius","initialRadius","maxRadius","minRadius","units","centerXY","radius","svg","select","svgCircle","svgCircleCutout","svgHandle","svgGuideline","svgRadiusTextContainer","svgRadiusText","attr","guidelineAngle","removers","addDragHandleListeners","onMouseMove","e","r","distance","unproject","toArray","min","max","setRadius","mouseXY","rise","run","angle","atan","PI","setCircle","onMouseUp","off","once","removeDragHandleListeners","addCircleListeners","offset","mapCanvas","lngLat","offsetX","offsetY","preventDefault","newEvent","constructor","dispatchEvent","removeCircleListeners","addMapMoveListeners","onMove","removeMapMoveListeners","geoCircle","inverted","c","turfCircle","steps","properties","area","convertArea","getZoom","rewind","reverse","mutate","_center","_point","nearPoles","resetCenterXY","_radius","turfPoint","some","pole","makePath","path","cutoutCircle","cutoutPath","_svg$node$getBBox","getBBox","handleXY","rhumbDestination","geometry","lineEnd","line","lineString","inter","lineIntersect","features","length","translateY","text","toFixed","translateX","_svgRadiusText$node$g","textWidth","coeff","sin","CirclePicker","backgroundColor","color","fontFamily","fontSize","_useMapbox","renderer","setRenderer","cleanup","loaded","left","stroke","strokeWidth","fill","clipPath","fillOpacity","strokeOpacity","strokeDasharray","textAnchor","getInitialRadius","bounds","getBounds","dist","round","RegionPicker","_ref$units","initialRadiusProp","getCenter","_useRegionContext","handleCircle","undefined","useRecenterRegion","_region$properties","recenterRegion","setValue","_useRegion","easeTo","useControls","updateControlsSync","flushSync","_sh","mode","which","vert","vars","sh","d","join","frag","customFrag","customUniforms","declarations","d2r","clip","v","keyToTile","split","parseInt","tileToKey","tile","pointToTile","lon","z","z2","pow","pointToCamera","floor","log","cameraToPoint","y2","exp","zoomToLevel","getOffsets","tileSize","camera","siblingCount","cameraOffset","next","ceil","getSiblings","viewport","tileX","tileY","tileZ","viewportHeight","viewportWidth","cameraX","cameraY","magnification","scale","window","devicePixelRatio","deltaX","deltaY","offsets","reduce","accum","getKeysToRender","targetKey","tiles","ancestor","getAncestorToRender","descendants","getDescendantsToRender","_keyToTile","isBufferPopulated","_keyToTile2","initialX","initialY","initialZ","coverage","keys","coveringKeys","filter","currentCoverage","getOverlappingAncestor","renderedKeys","_keyToTile3","aX","aY","aZ","child","find","parentKey","_keyToTile4","bX","bY","bZ","parent","factor","getAdjustedOffset","renderedKey","_keyToTile5","renderedX","renderedY","renderedLevel","level","descendantFactor","getTilesOfRegion","centralTile","edgeTile","maxDiff","centerPoint","bearing","rhumbBearing","i","intermediatePoint","intermediateTile","Array","from","getPyramidMetadata","multiscales","datasets","levels","dataset","Number","apply","pixels_per_tile","getBandInformation","selector","combinedBands","Object","isArray","bandMapping","selectorKey","values","bands","updatedBands","band","_extends2","bandKey","_updatedBands$key","getBands","variable","bandInfo","bandNames","setObjectValues","obj","getSelectorHash","JSON","stringify","getChunks","dimensions","shape","chunks","chunkIndicesToUse","dimension","selectorValue","coords","chunkSize","indices","indexOf","_","j","index","a","updatedResult","concat","getPositions","updatePaintProperty","getLayer","setPaintProperty","DEFAULT_FILL_VALUES","Tile","_this","loader","initializeBuffer","tileCoordinates","_bufferCache","_buffers","_loading","_ready","k","chunkedData","_loader","_proto","prototype","getBuffers","loadChunks","_this2","Promise","resolve","all","innerResolve","err","data","then","updated","Boolean","reject","populateBuffers","_this3","populateBuffersSync","_this4","bandInformation","info","chunkKey","bandData","findIndex","coordinate","pick","isLoading","_this5","isLoadingChunks","_this6","every","chunksLoaded","_this7","hasLoadedChunks","_this8","hasPopulatedBuffer","getPointValues","_this9","_ref2$point","chunkData","combinedIndices","count","chunkOffset","hasOwnProperty","selectorValues","selectorIndices","updatedAccum","_loop","el","chunkIndices","get","createTiles","opts","Tiles","source","colormap","clim","opacity","display","_ref$selector","_ref$uniforms","uniforms","fillValue","_ref$mode","invalidate","invalidateRegion","setMetadata","active","texture","format","validModes","primitive","initialize","attributes","buffer","prop","initialized","loadingID","zarr","openGroup","_getPyramidMetadata","attrs","array","emptyTexture","ndarray","Float32Array","ndim","drawTiles","context","pixelRatio","globalLevel","blend","enable","func","src","srcAlpha","dstRGB","dstAlpha","depth","getProps","adjustedActive","keysToRender","keyToRender","adjustedOffset","alreadySeenOffset","activeKeys","frame","draw","updateCamera","tileIndex","initialHash","dataUpdated","results","queryRegion","_out","resultDim","pointCoords","distanceToCenter","valuesToSet","_ref5","out","updateSelector","_ref6","updateUniforms","props","updateColormap","_ref7","Raster","_props$display","_props$opacity","_props$index","_props$regionOptions","regionOptions","_props$selector","_props$uniforms","_useControls","Date","getTime","regionDataInvalidated","setRegionDataInvalidated","_useRegl","_useSetLoading","lastQueried","s","queryStart","setData","triggerRepaint","callback","clear","Line","_ref$maxZoom","_ref$opacity","_ref$blur","blur","_ref$width","removed","sourceIdRef","layerIdRef","sourceId","getSource","addSource","maxzoom","layerId","addLayer","layout","visibility","paint","removeLayer","Fill","TICK_SEPARATION","TICK_SIZE","TICK_MARGIN","useRuler","_ref$showAxes","showAxes","_ref$showGrid","showGrid","gridColor","rulerContainer","setRulerTicks","addRuler","mapContainer","getContainer","offsetHeight","offsetWidth","numXTicks","numYTicks","append","classed","gx","xAxis","g","call","axisBottom","tickValues","domain","tickFormat","tickSize","gy","yAxis","axisLeft","gGrid","grid","xTickHeight","getBoundingClientRect","yTickNodes","selectAll","nodes","enter","update","exit","yTickWidth","b","xDomain","ticks","getWest","getEast","xRange","scaleOrdinal","range","yDomain","getNorth","getSouth","yRange","removeRuler","resetRuler"],"mappings":"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"}